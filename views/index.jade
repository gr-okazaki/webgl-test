extends layout

block content

    script.
        $(function () {
        });

        var camera, scene, renderer, particles, geometry, material, i, h, color, sprite, size;
        var mouseX = 0, mouseY = 0;

        var windowHalfX = window.innerWidth / 2;
        var windowHalfY = window.innerHeight / 2;

        var controls = null;

        init();
        animate();

        function init() {
            camera = new THREE.PerspectiveCamera( 55, window.innerWidth / window.innerHeight, 2, 2000 );
            camera.position.z = 200;

            scene = new THREE.Scene();
            scene.fog = new THREE.FogExp2( 0x000000, 0.001 );

            geometry = new THREE.Geometry();

            sprite = new THREE.TextureLoader().load( "/textures/disc.png" );

            for ( i = 0; i < 10000; i ++ ) {
                var vertex = new THREE.Vector3();
                vertex.x = 2000 * Math.random() - 1000;
                vertex.y = 2000 * Math.random() - 1000;
                vertex.z = 2000 * Math.random() - 1000;

                geometry.vertices.push( vertex );
            }

            material = new THREE.PointsMaterial( { size: 35, sizeAttenuation: false, map: sprite, alphaTest: 0.5, transparent: true } );
            material.color.setHSL( 1.0, 0.3, 0.7 );

            particles = new THREE.Points( geometry, material );
            scene.add( particles );
            //
            renderer = new THREE.WebGLRenderer();
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( window.innerWidth, window.innerHeight );
            document.body.appendChild( renderer.domElement );
            //
            document.addEventListener( 'mousemove', onDocumentMouseMove, false );
            //
            window.addEventListener( 'resize', onWindowResize, false );

            controls = new THREE.TrackballControls( camera );
            controls.rotateSpeed = 1.0;
            controls.zoomSpeed = 1.2;
            controls.panSpeed = 0.8

            controls.noZoom = false;
            controls.noPan = false;

            controls.staticMoving = true;
            controls.dynamicDampingFactor = 0.3;
            controls.keys = [65,83,68];
            controls.addEventListener('change', render);
        }

        function onWindowResize() {
            windowHalfX = window.innerWidth / 2;
            windowHalfY = window.innerHeight / 2;

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize( window.innerWidth, window.innerHeight );
        }

        function onDocumentMouseMove( event ) {
            mouseX = event.clientX - windowHalfX;
            mouseY = event.clientY - windowHalfY;
        }

        function animate() {
            requestAnimationFrame( animate );
            render();
        }

        function render() {
            var time = Date.now() * 0.00005;

            //camera.lookAt( scene.position );

            h = ( 360 * ( 1.0 + time ) % 360 ) / 360;
            material.color.setRGB( 0xff, 0xff, 0xff );

            renderer.render( scene, camera );
            //controls.update();
        }