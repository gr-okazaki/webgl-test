extends layout

block content
    script.
        $(function () {
        });

        var camera, scene, renderer, particles, geometry, material, i, sprite;
        var controls = null;

        init();
        animate();

        function init() {
            camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 1000 );
            camera.position.z = 1000;
            camera.lookAt({x:0,y:0,z:0});

            scene = new THREE.Scene();
            scene.fog = new THREE.FogExp2( 0x000000, 0.001 );

            geometry = new THREE.Geometry();

            sprite = new THREE.TextureLoader().load( "/textures/disc.png" );

            for ( i = 0; i < 10000; i ++ ) {
                var vertex = new THREE.Vector3();
                vertex.x = 2000 * Math.random() - 1000;
                vertex.y = 2000 * Math.random() - 1000;
                vertex.z = 2000 * Math.random() - 1000;

                geometry.vertices.push( vertex );
            }

            material = new THREE.PointsMaterial( { size: 7, sizeAttenuation: false, map: sprite, alphaTest: 0.5, transparent: true } );
            material.color.setRGB( 0xff, 0xff, 0xff );

            particles = new THREE.Points( geometry, material );
            scene.add( particles );
            //
            renderer = new THREE.WebGLRenderer();
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( window.innerWidth, window.innerHeight );
            document.body.appendChild( renderer.domElement );
            //
            //document.addEventListener( 'mousemove', onDocumentMouseMove, false );
            //
            window.addEventListener( 'resize', onWindowResize, false );

            //initTrackballControls();
            initOrbitControl();

            render();
        }

        function initOrbitControl() {
            controls = new THREE.OrbitControls( camera, renderer.domElement );

            controls.enableDamping = true;
            controls.dampingFactor = 0.1;
            controls.enableZoom = false;
            controls.enablePan = false;

            //controls.minPolarAngle = 0;
            //controls.maxPolarAngle = 0;
        }

        function initTrackballControls() {
            controls = new THREE.TrackballControls( camera, render.domElement );
            controls.rotateSpeed = 1.0;

            controls.noZoom = true;
            controls.noPan = true;

            controls.staticMoving = false;
            controls.dynamicDampingFactor = 0.3;
            controls.keys = [65,83,68];
            controls.addEventListener('change', render);
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize( window.innerWidth, window.innerHeight );

            controls.handleResize();

            render();
        }

        function animate() {
            requestAnimationFrame( animate );
            controls.update();
            render();
        }

        function render() {
            renderer.render( scene, camera );
        }